{"paragraphs":[{"text":"%md\n## Let's do some Analysis on GOT\n> file is located at `s3a://yb-spark-training/got_death_rdd.csv`","user":"anonymous","dateUpdated":"2019-11-13T15:03:38-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Let&rsquo;s do some Analysis on GOT</h2>\n<blockquote>\n  <p>file is located at <code>s3a://yb-spark-training/got_death_rdd.csv</code></p>\n</blockquote>\n</div>"}]},"apps":[],"jobName":"paragraph_1573667162972_68588575","id":"20180313-200509_1909248390","dateCreated":"2019-11-13T11:46:02-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:52"},{"text":"%md\n## Following is the header\n>  NAME ,ROLE, EXECUTION ,DEATH_SEASON ,DEATH_EPISODE ,DEATHFLASHBACK ,LIKELIHOODOFRETURN_NOTES,LIKELIHOODOFRETURN","user":"anonymous","dateUpdated":"2019-11-13T15:19:53-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Following is the header</h2>\n<blockquote>\n  <p>NAME ,ROLE, EXECUTION ,DEATH_SEASON ,DEATH_EPISODE ,DEATHFLASHBACK ,LIKELIHOODOFRETURN_NOTES,LIKELIHOODOFRETURN</p>\n</blockquote>\n</div>"}]},"apps":[],"jobName":"paragraph_1573667162977_-1899444345","id":"20180322-064102_1737100892","dateCreated":"2019-11-13T11:46:02-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:53"},{"text":"%md\n# Load file into Spark","user":"anonymous","dateUpdated":"2019-11-13T15:20:17-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Load file into Spark</h1>\n</div>"}]},"apps":[],"jobName":"paragraph_1573667162986_340579316","id":"20180322-065016_2077698654","dateCreated":"2019-11-13T11:46:02-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:54"},{"text":"%spark\n","user":"anonymous","dateUpdated":"2019-11-13T14:58:41-0600","config":{"tableHide":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1573667162987_-717111286","id":"20180322-065413_2066272607","dateCreated":"2019-11-13T11:46:02-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:55"},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2019-11-13T14:58:41-0600","config":{"tableHide":true,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","editorHide":false,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-5913609056963601661.py\", line 360, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 2, in <module>\n  File \"/opt/spark/python/pyspark/rdd.py\", line 1041, in count\n    return self.mapPartitions(lambda i: [sum(1 for _ in i)]).sum()\n  File \"/opt/spark/python/pyspark/rdd.py\", line 1032, in sum\n    return self.mapPartitions(lambda x: [sum(x)]).fold(0, operator.add)\n  File \"/opt/spark/python/pyspark/rdd.py\", line 906, in fold\n    vals = self.mapPartitions(func).collect()\n  File \"/opt/spark/python/pyspark/rdd.py\", line 809, in collect\n    port = self.ctx._jvm.PythonRDD.collectAndServe(self._jrdd.rdd())\n  File \"/opt/spark/python/lib/py4j-0.10.4-src.zip/py4j/java_gateway.py\", line 1133, in __call__\n    answer, self.gateway_client, self.target_id, self.name)\n  File \"/opt/spark/python/pyspark/sql/utils.py\", line 63, in deco\n    return f(*a, **kw)\n  File \"/opt/spark/python/lib/py4j-0.10.4-src.zip/py4j/protocol.py\", line 319, in get_return_value\n    format(target_id, \".\", name), value)\npy4j.protocol.Py4JJavaError: An error occurred while calling z:org.apache.spark.api.python.PythonRDD.collectAndServe.\n: org.apache.hadoop.mapred.InvalidInputException: Input path does not exist: file:/opt/zeppelin/conf/s3/yb-spark-training/Devices.csv\n\tat org.apache.hadoop.mapred.FileInputFormat.singleThreadedListStatus(FileInputFormat.java:285)\n\tat org.apache.hadoop.mapred.FileInputFormat.listStatus(FileInputFormat.java:228)\n\tat org.apache.hadoop.mapred.FileInputFormat.getSplits(FileInputFormat.java:313)\n\tat org.apache.spark.rdd.HadoopRDD.getPartitions(HadoopRDD.scala:199)\n\tat org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:252)\n\tat org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:250)\n\tat scala.Option.getOrElse(Option.scala:121)\n\tat org.apache.spark.rdd.RDD.partitions(RDD.scala:250)\n\tat org.apache.spark.rdd.MapPartitionsRDD.getPartitions(MapPartitionsRDD.scala:35)\n\tat org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:252)\n\tat org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:250)\n\tat scala.Option.getOrElse(Option.scala:121)\n\tat org.apache.spark.rdd.RDD.partitions(RDD.scala:250)\n\tat org.apache.spark.api.python.PythonRDD.getPartitions(PythonRDD.scala:53)\n\tat org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:252)\n\tat org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:250)\n\tat scala.Option.getOrElse(Option.scala:121)\n\tat org.apache.spark.rdd.RDD.partitions(RDD.scala:250)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:2094)\n\tat org.apache.spark.rdd.RDD$$anonfun$collect$1.apply(RDD.scala:936)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:151)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:112)\n\tat org.apache.spark.rdd.RDD.withScope(RDD.scala:362)\n\tat org.apache.spark.rdd.RDD.collect(RDD.scala:935)\n\tat org.apache.spark.api.python.PythonRDD$.collectAndServe(PythonRDD.scala:467)\n\tat org.apache.spark.api.python.PythonRDD.collectAndServe(PythonRDD.scala)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244)\n\tat py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357)\n\tat py4j.Gateway.invoke(Gateway.java:280)\n\tat py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)\n\tat py4j.commands.CallCommand.execute(CallCommand.java:79)\n\tat py4j.GatewayConnection.run(GatewayConnection.java:214)\n\tat java.lang.Thread.run(Thread.java:748)\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-5913609056963601661.py\", line 367, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-5913609056963601661.py\", line 360, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 2, in <module>\n  File \"/opt/spark/python/pyspark/rdd.py\", line 1041, in count\n    return self.mapPartitions(lambda i: [sum(1 for _ in i)]).sum()\n  File \"/opt/spark/python/pyspark/rdd.py\", line 1032, in sum\n    return self.mapPartitions(lambda x: [sum(x)]).fold(0, operator.add)\n  File \"/opt/spark/python/pyspark/rdd.py\", line 906, in fold\n    vals = self.mapPartitions(func).collect()\n  File \"/opt/spark/python/pyspark/rdd.py\", line 809, in collect\n    port = self.ctx._jvm.PythonRDD.collectAndServe(self._jrdd.rdd())\n  File \"/opt/spark/python/lib/py4j-0.10.4-src.zip/py4j/java_gateway.py\", line 1133, in __call__\n    answer, self.gateway_client, self.target_id, self.name)\n  File \"/opt/spark/python/pyspark/sql/utils.py\", line 63, in deco\n    return f(*a, **kw)\n  File \"/opt/spark/python/lib/py4j-0.10.4-src.zip/py4j/protocol.py\", line 319, in get_return_value\n    format(target_id, \".\", name), value)\npy4j.protocol.Py4JJavaError: An error occurred while calling z:org.apache.spark.api.python.PythonRDD.collectAndServe.\n: org.apache.hadoop.mapred.InvalidInputException: Input path does not exist: file:/opt/zeppelin/conf/s3/yb-spark-training/Devices.csv\n\tat org.apache.hadoop.mapred.FileInputFormat.singleThreadedListStatus(FileInputFormat.java:285)\n\tat org.apache.hadoop.mapred.FileInputFormat.listStatus(FileInputFormat.java:228)\n\tat org.apache.hadoop.mapred.FileInputFormat.getSplits(FileInputFormat.java:313)\n\tat org.apache.spark.rdd.HadoopRDD.getPartitions(HadoopRDD.scala:199)\n\tat org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:252)\n\tat org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:250)\n\tat scala.Option.getOrElse(Option.scala:121)\n\tat org.apache.spark.rdd.RDD.partitions(RDD.scala:250)\n\tat org.apache.spark.rdd.MapPartitionsRDD.getPartitions(MapPartitionsRDD.scala:35)\n\tat org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:252)\n\tat org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:250)\n\tat scala.Option.getOrElse(Option.scala:121)\n\tat org.apache.spark.rdd.RDD.partitions(RDD.scala:250)\n\tat org.apache.spark.api.python.PythonRDD.getPartitions(PythonRDD.scala:53)\n\tat org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:252)\n\tat org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:250)\n\tat scala.Option.getOrElse(Option.scala:121)\n\tat org.apache.spark.rdd.RDD.partitions(RDD.scala:250)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:2094)\n\tat org.apache.spark.rdd.RDD$$anonfun$collect$1.apply(RDD.scala:936)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:151)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:112)\n\tat org.apache.spark.rdd.RDD.withScope(RDD.scala:362)\n\tat org.apache.spark.rdd.RDD.collect(RDD.scala:935)\n\tat org.apache.spark.api.python.PythonRDD$.collectAndServe(PythonRDD.scala:467)\n\tat org.apache.spark.api.python.PythonRDD.collectAndServe(PythonRDD.scala)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244)\n\tat py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357)\n\tat py4j.Gateway.invoke(Gateway.java:280)\n\tat py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)\n\tat py4j.commands.CallCommand.execute(CallCommand.java:79)\n\tat py4j.GatewayConnection.run(GatewayConnection.java:214)\n\tat java.lang.Thread.run(Thread.java:748)\n\n\n"}]},"apps":[],"jobName":"paragraph_1573667162987_-1126026619","id":"20180322-065416_224785395","dateCreated":"2019-11-13T11:46:02-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:56"},{"title":"Solution","text":"%md\n# Spark\n```scala\nval rdd = sc.textFile(\"s3//path/to/file\")\n```\n# PySpark\n```\nrdd = sc.textFile(\"s3//path/to/file\")\n```","user":"anonymous","dateUpdated":"2019-11-13T15:21:05-0600","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"title":true,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Spark</h1>\n<pre><code class=\"scala\">val rdd = sc.textFile(&quot;s3//path/to/file&quot;)\n</code></pre>\n<h1>PySpark</h1>\n<pre><code>rdd = sc.textFile(&quot;s3//path/to/file&quot;)\n</code></pre>\n</div>"}]},"apps":[],"jobName":"paragraph_1573667162988_-991314363","id":"20180322-065032_756310003","dateCreated":"2019-11-13T11:46:02-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:57"},{"text":"%md\n# count number of records","user":"anonymous","dateUpdated":"2019-11-13T15:21:08-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>count number of records</h1>\n</div>"}]},"apps":[],"jobName":"paragraph_1573667162997_-114771379","id":"20180313-203029_2138461296","dateCreated":"2019-11-13T11:46:02-0600","dateStarted":"2019-11-13T14:58:30-0600","dateFinished":"2019-11-13T14:58:33-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:58"},{"text":"%spark\n","user":"anonymous","dateUpdated":"2019-11-13T14:58:41-0600","config":{"tableHide":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1573667162998_433174554","id":"20180322-065429_961150758","dateCreated":"2019-11-13T11:46:02-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:59"},{"text":"%pyspark","user":"anonymous","dateUpdated":"2019-11-13T14:59:01-0600","config":{"tableHide":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Code here\n"}]},"apps":[],"jobName":"paragraph_1573667162999_538767375","id":"20180322-065431_542381803","dateCreated":"2019-11-13T11:46:02-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:60"},{"title":"Solution","text":"%md\n# Spark\n```\nrdd.count\n```\n# Pyspark\n```\nrdd.count()\n```\n","user":"anonymous","dateUpdated":"2019-11-13T14:59:07-0600","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"title":true,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<pre><code>rdd.count\n</code></pre>\n</div>"}]},"apps":[],"jobName":"paragraph_1573667162999_836285139","id":"20180322-064006_1262105004","dateCreated":"2019-11-13T11:46:02-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:61"},{"text":"%md\n## Let's define some constant indices for the columns which will be used in further statements.","user":"anonymous","dateUpdated":"2019-11-13T14:59:11-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Let&rsquo;s define some constant indices for the columns which will be used in further statements.</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1573667162999_-983046755","id":"20180313-202145_106029540","dateCreated":"2019-11-13T11:46:02-0600","dateStarted":"2019-11-13T14:59:11-0600","dateFinished":"2019-11-13T14:59:11-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:62"},{"text":"%spark\nval NAME = 0\nval ROLE = 1\nval EXECUTION = 2\nval DEATH_SEASON = 3\nval DEATH_EPISODE = 4\nval DEATHFLASHBACK = 5\nval LIKELIHOODOFRETURN_NOTES = 6\nval LIKELIHOODOFRETURN = 7","user":"anonymous","dateUpdated":"2019-11-13T14:58:41-0600","config":{"tableHide":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"NAME: Int = 0\nROLE: Int = 1\nEXECUTION: Int = 2\nDEATH_SEASON: Int = 3\nDEATH_EPISODE: Int = 4\nDEATHFLASHBACK: Int = 5\nLIKELIHOODOFRETURN_NOTES: Int = 6\nLIKELIHOODOFRETURN: Int = 7\n"}]},"apps":[],"jobName":"paragraph_1573667163000_96156257","id":"20180313-202200_47253987","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:63"},{"text":"%pyspark\nNAME = 0\nROLE = 1\nEXECUTION = 2\nDEATH_SEASON = 3\nDEATH_EPISODE = 4\nDEATHFLASHBACK = 5\nLIKELIHOODOFRETURN_NOTES = 6\nLIKELIHOODOFRETURN = 7","user":"anonymous","dateUpdated":"2019-11-13T14:58:41-0600","config":{"tableHide":true,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","editorHide":false,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1573667163000_-1756661087","id":"20180322-065522_1872481126","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:64"},{"text":"%md\n## To view sample data or to test if RDD is loaded with the file, do first or take on it\n\n","user":"anonymous","dateUpdated":"2019-11-13T14:59:23-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>To view sample data or to test if RDD is loaded with the file, do first or take on it</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1573667163000_-428770150","id":"20180313-202216_1526711631","dateCreated":"2019-11-13T11:46:03-0600","dateStarted":"2019-11-13T14:59:23-0600","dateFinished":"2019-11-13T14:59:23-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:65"},{"text":"%spark\n","user":"anonymous","dateUpdated":"2019-11-13T14:58:42-0600","config":{"tableHide":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res7: String = Will|Ranger of the Nights Watch|Beheaded for desertion by Ned Stark|1|1|||0%\n"}]},"apps":[],"jobName":"paragraph_1573667163005_1494464538","id":"20180313-202228_1078380308","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:66"},{"text":"%pyspark\n\n","user":"anonymous","dateUpdated":"2019-11-13T14:58:42-0600","config":{"tableHide":true,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","editorHide":false,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"<SparkContext master=spark://ip-172-31-11-184.ec2.internal:7077 appName=Zeppelin>\n"}]},"apps":[],"jobName":"paragraph_1573667163006_560116658","id":"20180322-065559_826316676","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:67"},{"title":"Solution","text":"%md\n# Spark\n```\nrdd.first\nrdd.take(10)\n```\n\n# PySpark\n```\nrdd.first()\nrdd.take(10)\n```\n","user":"anonymous","dateUpdated":"2019-11-13T14:59:27-0600","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"title":true,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Spark</h1>\n<pre><code>rdd.first\nrdd.take(10)\n</code></pre>\n<h1>PySpark</h1>\n<pre><code>rdd.first\nrdd.take(10)\n</code></pre>\n</div>"}]},"apps":[],"jobName":"paragraph_1573667163006_-1123174048","id":"20180322-065633_1583562287","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:68"},{"title":"Explanation","text":"%md \n## \"take\" will print the top 'n' lines from the CSV file where as \"first\" will print first line","user":"anonymous","dateUpdated":"2019-11-13T14:59:34-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"title":true,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>&ldquo;take&rdquo; will print the top &lsquo;n&rsquo; lines from the CSV file where as &ldquo;first&rdquo; will print first line</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1573667163006_106991945","id":"20180313-202303_728018234","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:69"},{"text":"%md\n## To access individual elements, split the lines by delimiter (comma) using \"map\" transformation.\n\n","user":"anonymous","dateUpdated":"2019-11-13T14:59:41-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>To access individual elements, split the lines by delimiter (comma) using &ldquo;map&rdquo; transformation.</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1573667163007_972278594","id":"20180313-202634_660154813","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:70"},{"text":"%spark\n","user":"anonymous","dateUpdated":"2019-11-13T14:58:42-0600","config":{"tableHide":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"namesRdd: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[23] at map at <console>:31\n"}]},"apps":[],"jobName":"paragraph_1573667163007_7154209","id":"20180313-202700_1714675661","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:71"},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2019-11-13T14:58:42-0600","config":{"tableHide":false,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","editorHide":false,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1573667163008_-1559492014","id":"20180322-065923_1518064926","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:72"},{"title":"Solution","text":"%md\n# Spark\n```\nval namesRdd = rdd.map(x => x.split('|')(NAME))\n```\n\n# PySpark\n```\nnamesRdd = rdd.map(lambda l:l.split(\",\")[NAME])\n```","user":"anonymous","dateUpdated":"2019-11-13T14:59:49-0600","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"title":true,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Spark</h1>\n<pre><code>val namesRdd = rdd.map(x =&gt; x.split(&#39;|&#39;)(NAME))\n</code></pre>\n<h1>PySpark</h1>\n<pre><code>namesRdd = rdd.map(lambda l:l.split(&quot;,&quot;)[NAME])\n</code></pre>\n</div>"}]},"apps":[],"jobName":"paragraph_1573667163008_430013467","id":"20180322-065926_569617767","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:73"},{"text":"%md\n## The above statement transforms the data to names fields. To verify whether it split the data correctly, print sample data.","user":"anonymous","dateUpdated":"2019-11-13T14:59:56-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>The above statement transforms the data to names fields. To verify whether it split the data correctly, print sample data.</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1573667163008_1175392732","id":"20180313-202709_723476903","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:74"},{"text":"%spark\nnamesRdd.take(5)","user":"anonymous","dateUpdated":"2019-11-13T14:58:42-0600","config":{"tableHide":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"<console>:35: error: not found: value namesRdd\n       namesRdd.take(5)\n       ^\n"}]},"apps":[],"jobName":"paragraph_1573667163009_-55861393","id":"20180313-202721_762114309","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:75"},{"text":"%pyspark\nnamesRdd.take(5)","user":"anonymous","dateUpdated":"2019-11-13T15:00:08-0600","config":{"tableHide":true,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","editorHide":false,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Code here\n"}]},"apps":[],"jobName":"paragraph_1573667163009_-44465466","id":"20180322-070126_447895744","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:76"},{"text":"%md\n## To filter specific names, use \"filter\" function. This filters all the names which have \"Stark\" in it. Winter is coming!","user":"anonymous","dateUpdated":"2019-11-13T15:00:19-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>To filter specific names, use &ldquo;filter&rdquo; function. This filters all the names which have &ldquo;Stark&rdquo; in it. Winter is coming!</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1573667163009_-782738614","id":"20180313-202734_1590404098","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:77"},{"text":"%spark\n","user":"anonymous","dateUpdated":"2019-11-13T14:58:42-0600","config":{"tableHide":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1573667163010_898396066","id":"20180322-070156_1644354166","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:78"},{"text":"%pyspark","user":"anonymous","dateUpdated":"2019-11-13T14:58:43-0600","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1573667163010_-1554486250","id":"20180322-070159_810147263","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:79"},{"title":"Solution","text":"%md\n# Spark\n```\nval starkRdd = namesRdd.filter(x => x.contains(\"Stark\"))\n```\n# PySpark\n```\nstarkRdd = namesRdd.filter(lambda x: \"STARK\" in x)\n```","user":"anonymous","dateUpdated":"2019-11-13T15:00:23-0600","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"title":true,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Spark</h1>\n<pre><code>val starkRdd = namesRdd.filter(x =&gt; x.contains(&quot;Stark&quot;))\n</code></pre>\n<h1>PySpark</h1>\n<pre><code>starkRdd = namesRdd.filter(lambda x: &quot;STARK&quot; in x)\n</code></pre>\n</div>"}]},"apps":[],"jobName":"paragraph_1573667163010_1126182066","id":"20180313-202735_1786006870","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:80"},{"text":"%md\n## Verify it by printing some samples,","user":"anonymous","dateUpdated":"2019-11-13T15:00:26-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Verify it by printing some samples,</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1573667163011_458216396","id":"20180313-202736_189939456","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:81"},{"text":"%pyspark\nstarkRdd.take(5)\n","user":"anonymous","dateUpdated":"2019-11-13T15:00:29-0600","config":{"tableHide":true,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","editorHide":false,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[]\n"}]},"apps":[],"jobName":"paragraph_1573667163011_324888329","id":"20180313-202736_1058934077","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:82"},{"text":"%md\n## Let's do count - How many Starks are there in total?\n\n","user":"anonymous","dateUpdated":"2019-11-13T15:00:33-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Let&rsquo;s do count - How many Starks are there in total?</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1573667163012_1446768248","id":"20180313-202736_745148148","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:83"},{"text":"starkRdd.count\n","user":"anonymous","dateUpdated":"2019-11-13T14:58:43-0600","config":{"tableHide":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1573667163012_-888776066","id":"20180313-202736_129442606","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:84"},{"text":"%md\n# Exercises:","user":"anonymous","dateUpdated":"2019-11-13T15:00:41-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Exercises:</h1>\n</div>"}]},"apps":[],"jobName":"paragraph_1573667163012_1550990136","id":"20180313-202736_2002272606","dateCreated":"2019-11-13T11:46:03-0600","dateStarted":"2019-11-13T15:00:41-0600","dateFinished":"2019-11-13T15:00:41-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:85"},{"text":"%md\n## Find out how many characters have died in Season 3?\n\n","user":"anonymous","dateUpdated":"2019-11-13T15:00:49-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Find out how many characters have died in Season 3?</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1573667163013_845512748","id":"20180313-202847_2111342042","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:86"},{"text":"%spark\n","user":"anonymous","dateUpdated":"2019-11-13T14:58:43-0600","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1573667163013_1534704857","id":"20180322-183637_661831644","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:87"},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2019-11-13T14:58:43-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","editorHide":false,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1573667163014_1560859884","id":"20180322-183639_1518252852","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:88"},{"title":"Solution","text":"%md\n# Spark\n```\nval deathCount = rdd.filter(x => x.split('|')(DEATH_SEASON) == \"3\").count\n```\n# Pyspark\n```\ndeathCount = rdd.filter(lambda x: x.split(\"|\")[DEATH_SEASON] == '3').count()\n```","user":"anonymous","dateUpdated":"2019-11-13T15:00:54-0600","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"title":true,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Spark</h1>\n<pre><code>val deathCount = rdd.filter(x =&gt; x.split(&#39;|&#39;)(DEATH_SEASON) == &quot;3&quot;).count\n</code></pre>\n<h1>Pyspark</h1>\n<pre><code>deathCount = rdd.filter(lambda x: x.split(&quot;|&quot;)[DEATH_SEASON] == &#39;3&#39;).count()\n</code></pre>\n</div>"}]},"apps":[],"jobName":"paragraph_1573667163014_24457993","id":"20180313-202847_1372946726","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:89"},{"text":"%md\n### Note how filter function is used in here. filter() filters out the elements which return 'false'.\n\n","user":"anonymous","dateUpdated":"2019-11-13T15:00:57-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Note how filter function is used in here. filter() filters out the elements which return &lsquo;false&rsquo;.</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1573667163015_-248161701","id":"20180313-202847_1266135013","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:90"},{"text":"%md\n## List all the character's names who died in Season 5.\n\n","user":"anonymous","dateUpdated":"2019-11-13T15:01:03-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>List all the character&rsquo;s names who died in Season 5.</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1573667163015_-1727703770","id":"20180313-202847_2041429338","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:91"},{"title":"Hint","text":"%md\n* Create a pairedRDD with name and death_season in it.\n\n","user":"anonymous","dateUpdated":"2019-11-13T15:22:24-0600","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true,"fontSize":9,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<ul>\n  <li>Create a pairedRDD with name and death_season in it.</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1573667163016_429294788","id":"20180313-202848_292460802","dateCreated":"2019-11-13T11:46:03-0600","dateStarted":"2019-11-13T15:01:10-0600","dateFinished":"2019-11-13T15:01:10-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:92"},{"text":"%spark\n","user":"anonymous","dateUpdated":"2019-11-13T14:58:44-0600","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1573667163016_1815246441","id":"20180322-183848_207412639","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:93"},{"text":"%pyspark","user":"anonymous","dateUpdated":"2019-11-13T14:58:44-0600","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1573667163016_1842558466","id":"20180322-183850_119322681","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:94"},{"title":"Solution","text":"%md\n# Spark\n```\nval nameSeasonPair = rdd.map(x => (x.split('|')(NAME), x.split('|')(DEATH_SEASON)))\n```\n# Pyspark\n```\nnameSeasonPair = rdd.map(lambda x: (x.split(\"|\")[NAME],x.split(\"|\")[DEATH_SEASON]))\n```\n","user":"anonymous","dateUpdated":"2019-11-13T15:01:53-0600","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"title":true,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1573667163032_1411426701","id":"20180313-202848_100790497","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:95"},{"text":"%md\n#### Using filter function, create an RDD of names with season equals to 5. Here 'x' is a tuple of (String, String)\n\n","user":"anonymous","dateUpdated":"2019-11-13T15:01:56-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Using filter function, create an RDD of names with season equals to 5. Here &lsquo;x&rsquo; is a tuple of (String, String)</h4>\n</div>"}]},"apps":[],"jobName":"paragraph_1573667163033_-1894408686","id":"20180313-202848_386602206","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:96"},{"text":"%spark","user":"anonymous","dateUpdated":"2019-11-13T14:58:44-0600","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1573667163033_1875672139","id":"20180322-184056_1981339130","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:97"},{"text":"%pyspark","user":"anonymous","dateUpdated":"2019-11-13T14:58:44-0600","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1573667163034_1921284622","id":"20180322-184058_1492212690","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:98"},{"title":"Solution","text":"%md\n# Spark\n```\nval nmDeathRdd = nameSeasonPair.filter(x => x._2 == \"5\")\n```\n# Pyspark\n```\nnmDeathRdd = nameSeasonPair.filter(lambda x: x[1] == '5')\n```","user":"anonymous","dateUpdated":"2019-11-13T15:01:59-0600","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"title":true,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1573667163034_-1213993031","id":"20180313-202848_209703977","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:99"},{"title":"Hint","text":"%md\n* List the names from the result,\n\n","user":"anonymous","dateUpdated":"2019-11-13T15:02:17-0600","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true,"fontSize":9,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<ul>\n  <li>List the names from the result,</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1573667163035_-1454839085","id":"20180313-202848_1693358320","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:100"},{"text":"%spark\n","user":"anonymous","dateUpdated":"2019-11-13T14:58:44-0600","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"fontSize":9,"editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1573667163035_769332263","id":"20180322-203651_2088235315","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:101"},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2019-11-13T14:58:44-0600","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"fontSize":9,"editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1573667163036_-1721621","id":"20180322-203654_2043530399","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:102"},{"title":"Solution","text":"%md\n# Scala\n```\nnmDeathRdd.map(_._1).take(10).foreach(println)\n```\n\n# PySpark\n```\nnmDeathRdd.map(lambda l:l).take(10)\n```","user":"anonymous","dateUpdated":"2019-11-13T15:02:28-0600","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"title":true,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Scala</h1>\n<pre><code>nmDeathRdd.map(_._1).take(10).foreach(println)\n</code></pre>\n<h1>PySpark</h1>\n<pre><code>nmDeathRdd.map(lambda l:l).take(10)\n</code></pre>\n</div>"}]},"apps":[],"jobName":"paragraph_1573667163036_1049888348","id":"20180313-202849_72778556","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:103"},{"text":"%md\n## Sort the death count by seasons and episodes.\n\n#### Hint: Create a pairedRDD with season and episode as key and constant '1' as value.","user":"anonymous","dateUpdated":"2019-11-13T15:02:33-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Sort the death count by seasons and episodes.</h2>\n<h4>Hint: Create a pairedRDD with season and episode as key and constant &lsquo;1&rsquo; as value.</h4>\n</div>"}]},"apps":[],"jobName":"paragraph_1573667163036_-1800507673","id":"20180313-202849_112476659","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:104"},{"text":"%spark\n","user":"anonymous","dateUpdated":"2019-11-13T14:58:44-0600","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1573667163037_587113630","id":"20180322-184345_1280535557","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:105"},{"text":"%pyspark","user":"anonymous","dateUpdated":"2019-11-13T14:58:45-0600","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1573667163037_90099381","id":"20180322-184343_298131838","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:106"},{"title":"Solution","text":"%md\n# Spark\n```\nval seasonEpisodePair = rdd.map(x => ((x.split('|')(DEATH_SEASON), x.split('|')(DEATH_EPISODE)), 1))\n```\n# Pyspark\n```\nseasonEpisodePair = rdd.map( lambda x: ((x.split(\"|\")[DEATH_SEASON], x.split(\"|\")[DEATH_EPISODE]),1))\n```","user":"anonymous","dateUpdated":"2019-11-13T15:02:40-0600","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"title":true,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"seasonEpisodePair: org.apache.spark.rdd.RDD[((String, String), Int)] = MapPartitionsRDD[7] at map at <console>:33\n"}]},"apps":[],"jobName":"paragraph_1573667163038_1498639672","id":"20180313-202849_910520301","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:107"},{"title":"Hint","text":"%md\n*  Reduce it by key and sum up the values.\n\n","user":"anonymous","dateUpdated":"2019-11-13T15:03:00-0600","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true,"fontSize":9,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<ul>\n  <li>Reduce it by key and sum up the values.</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1573667163038_-1464588701","id":"20180313-202849_2121720192","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:108"},{"text":"%spark\n","user":"anonymous","dateUpdated":"2019-11-13T14:58:45-0600","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1573667163038_950795948","id":"20180322-184630_1777429738","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:109"},{"text":"%pyspark","user":"anonymous","dateUpdated":"2019-11-13T14:58:45-0600","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1573667163039_167440680","id":"20180322-184628_2116255312","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:110"},{"title":"Solution","text":"%md\n# Solution\n# Spark\n```\nval seasonEpisodeCounts = seasonEpisodePair.reduceByKey((x ,y) => x + y)\n```\n# Pyspark\n```\nseasonEpisodeCounts = seasonEpisodePair.reduceByKey(lambda x, y: x + y)\n```","user":"anonymous","dateUpdated":"2019-11-13T15:03:03-0600","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"title":true,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Solution</h1>\n<h1>Spark</h1>\n<pre><code>val seasonEpisodeCounts = seasonEpisodePair.reduceByKey((x ,y) =&gt; x + y)\n</code></pre>\n<h1>Pyspark</h1>\n<pre><code>seasonEpisodeCounts = seasonEpisodePair.reduceByKey(lambda x, y: x + y)\n</code></pre>\n</div>"}]},"apps":[],"jobName":"paragraph_1573667163039_-1046127143","id":"20180313-202850_821035076","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:111"},{"text":"%md\n#  Sort the values in decending order and print it on console.\n\n","user":"anonymous","dateUpdated":"2019-11-13T15:03:06-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Sort the values in decending order and print it on console.</h1>\n</div>"}]},"apps":[],"jobName":"paragraph_1573667163040_-450183968","id":"20180313-202850_1730431202","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:112"},{"text":"%spark\n","user":"anonymous","dateUpdated":"2019-11-13T14:58:45-0600","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1573667163046_617711242","id":"20180322-184844_429381931","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:113"},{"text":"%pyspark","user":"anonymous","dateUpdated":"2019-11-13T15:03:10-0600","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true,"fontSize":9,"tableHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Code here\n"}]},"apps":[],"jobName":"paragraph_1573667163047_1414394558","id":"20180322-184843_1698473113","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:114"},{"title":"Solution","text":"%md\n# Spark\n```\nseasonEpisodeCounts.sortBy(x => x._2, false).take(10).foreach(println)\n```\n# Pyspark\n```\nseasonEpisodeCounts.sortBy(lambda x: x[1], False).take(10)\n```","user":"anonymous","dateUpdated":"2019-11-13T15:03:16-0600","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"title":true,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"((6,10),12)\n((5,10),6)\n((6,9),6)\n((2,10),5)\n((6,2),5)\n((4,9),5)\n((6,8),4)\n((6,1),3)\n((3,4),3)\n((4,10),3)\n"}]},"apps":[],"jobName":"paragraph_1573667163047_1604614583","id":"20180313-202850_308782826","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:115"},{"text":"%md\n#### You have reached end of Notebook, Feel free to explore","user":"anonymous","dateUpdated":"2019-11-13T15:03:26-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>You have reached end of Notebook</h4>\n</div>"}]},"apps":[],"jobName":"paragraph_1573667163050_-1557813818","id":"20180313-204254_414256254","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:116"},{"text":"%md\n","user":"anonymous","dateUpdated":"2019-11-13T14:58:45-0600","config":{"colWidth":12,"editorMode":"ace/mode/markdown","results":{},"enabled":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"fontSize":9,"editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1573667163051_1510276374","id":"20180322-204046_433687639","dateCreated":"2019-11-13T11:46:03-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:117"}],"name":"Day1_Session2/SPARK_RDD_Lab","id":"2ETTRWCTC","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}